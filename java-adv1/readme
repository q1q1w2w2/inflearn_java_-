2024.08.01

원자적 연산 -> 나눌 수 없는 연산
ex) i = 1, 단 하나의 순서로 실행됨, 원자적 연산
ex) i = i + 1, i값을 읽음 -> 읽은 값에 1을 더하고 -> 왼쪽 i에 대입, 원자적 아님
원자적 연산은 멀티스레드 환경에서 문제발생하지 않음
원자적 연산이 아니면 synchronized나 lock을 사용하여 안전한 임계 구역이 필요
(복습: volatile은 메모리 동기화를 위해 메인메모리를 직접 사용, 
synchronized는 모니터 락을 이용하여 하나의 스레드씩 실행)

AtomicInteger클래스(원자적인 Integer)
여러 스레드가 동시 실행해도 원자적인 연산처럼 제공이 되어 문제가 없음 
CAS연산(compareAndSet) -> 하드웨어(CPU)에서 원자적인 연산이 아닌 연산을 하나로 묶어서 처리(연산 사이에 다른 스레드가 끼어들지 못하게 차단), 값을 읽고 변경하는 과정을 하나로 묶음
충돌 잦으면 성능 저하 발생

CAS와 Lock의 비교
Lock: 데이터에 접근 전 항상 락을 획득, 다른 스레드 접근을 막음
CAS: 락 없이 데이터에 바로 접근, 충돌 발생하면 재시도


---------------------------------------------------------------------
